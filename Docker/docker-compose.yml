version: '3'

volumes:
    db-data:
    
services:
    db-mysql:
        image: mysql
        container_name: db-mysql
        volumes:
            - db-data:/var/lib/mysql
            - ./init/mysql/my.cnf:/etc/my.cnf
        environment:
            MYSQL_ROOT_PASSWORD: rootpasswd
            MYSQL_USER: tornado
            MYSQL_PASSWORD: tornadopasswd
            MYSQL_DATABASE: test
        restart: always

    db-admin:
        image: phpmyadmin/phpmyadmin
        container_name: db-admin
        environment:
            PMA_ARBITRARY: 1
            PMA_HOST: db-mysql:3306
            PMA_USER: tornado
            PMA_PASSWORD: tornadopasswd
        links:
            - db-mysql
        ports:
            - "8081:80"
        restart: always
        privileged: true
    
    tornado-server:
        build:
            context: ./dockerfile/tornado/
            dockerfile: Dockerfile
        container_name: tornado
        image: tornado-server
        ports:
            - "8080:8080"
            - "8000:8000"
        links:
            - db-mysql
        volumes:
            - ../tornado-server:/app/tornado-server
            - ../notebook:/notebook
            - ./dockerfile/tornado/init/jupyter_notebook_config.py:/root/.jupyter/jupyter_notebook_config.py
            - ./dockerfile/tornado/init/requirements.txt:/tmp/requirements.txt
            - ./dockerfile/tornado/init/mysql/mysql_config.json:/root/.local/config/mysql_config.json
            - ./dockerfile/tornado/init/mysql-jupyter-kernel:/root/.local/share/jupyter/kernels/jupyter-mysql-kernel
        working_dir: /app/tornado-server
        command: jupyter lab
        privileged: true
        restart: always

    mock-server:
        build:
            context: ./dockerfile/mock-server/
            dockerfile: Dockerfile
        container_name: mock-server
        working_dir: /home/app/mock-server
        volumes:
            - ../mock-server:/home/app/mock-server
        command: json-server mock-db.json -w -p 8000
        ports:
            - "5000:8000"

    reactjs-client:
        build:
            context: ./dockerfile/reactjs/
            dockerfile: Dockerfile
        container_name: reactjs-client
        working_dir: /home/app
        volumes:
            - ../react-client:/home/app
        command: sh -c "npm install && npm run start"
        ports:
            - "3000:8000"